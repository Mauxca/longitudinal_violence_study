gamma_lcb <- (1 - sum_c[c_theta0]) / (choose(40, c_theta0) *
choose(40, 25-c_theta0) / choose(80, 25))
gamma_lcb
bound <- function(c){
nume <- (c/40)/(1 - (c/40))
deno <- ((25 - c)/40)/(1 - ((25-c)/40))
return(log(nume / deno))
}
bound(c_lcb + 1)
which(sum_c < 0.025)[-1] + 1
which(sum_c < 0.025)[-1]
dplyr::last(which(sum_c < 0.025))
dplyr::last(which(sum_c < 0.025)) + 1
# \gamma(\theta_0):
gamma_lcb <- (1 - 0.025 - sum_c[c_theta0]) / (choose(40, c_theta0) *
choose(40, 25-c_theta0) / choose(80, 25))
gamma_lcb
gamma_ucb <- (0.025 - sum_c[c_ucb - 1])/(choose(40, c_ucb) * choose(40, 25 - c_ucb))/choose(80, 25)
c_ucb <- dplyr::last(which(sum_c < 0.025)) + 1
c_ucb
gamma_ucb <- (0.025 - sum_c[c_ucb - 1])/(choose(40, c_ucb) * choose(40, 25 - c_ucb))/choose(80, 25)
gamma_ucb
# \gamma(\theta_0):
gamma_lcb <- (0.025 -1 + sum_c[c_lcb]) / (choose(40, c_lcb) *
choose(40, 25-c_lcb) / choose(80, 25))
gamma_lcb
bound <- function(c){
nume <- (c/40)/(1 - (c/40))
deno <- ((25 - c)/40)/(1 - ((25-c)/40))
return(log(nume / deno))
}
bound(c_lcb + 1)
bound(c_lcb)
bound(c_ucb)
bound(c_lcb)
bound(c_ucb)
bound <- function(c){
nume <- (c/40)/(1 - (c/40))
deno <- ((25 - c)/40)/(1 - ((25-c)/40))
return(nume / deno)
}
bound(c_lcb)
bound(c_ucb)
bound(c_lcb)
bound(c_ucb)
25*15
25*15*2
375*40
770^2 - 4*50*15000
sum_c <- rep(NA, 24)
for(c in 1:24){
sum_c[c] <- sum(sapply(1:c, function(b){choose(40, b) *
choose(40, 25-b) / choose(80, 25)}))
}
which(sum_c <= 1 - 0.025)
which(sum_c <= 1 - 0.025)
which(sum_c > 0.025)
which(sum_c <= 1 - 0.025)
which(sum_c < 1 - 0.025)
dplyr::last(which(sum_c <= 1 - 0.025))
which(sum_c > 0.025)
dplyr::last(which(1 - sum_c >= 0.025))
1-sum_c[17]
1-sum_c[16]
1-sum_c[15]
1-sum_c[17]
1-sum_c[16]
which(sum_c > 0.025)[1]
sum_c[7]
sum_c <- rep(NA, 24)
for(c in 1:24){
sum_c[c] <- sum(sapply(1:c, function(b){choose(40, b) *
choose(40, 25-b) / choose(80, 25)}))
}
c2 <- dplyr::last(which(1 - sum_c >= 0.025))
# 1-sum_c[16] --> c = 17
c2
c1 <- which(sum_c > 0.025)[1]
c1
rho <- function(t){
nume <- (t/40)/(1 - (t/40))
deno <- ((25 - t)/40)/(1 - ((25-t)/40))
return(nume / deno)
}
rho(c1)
rho(c2)
c1 <- which(sum_c > 0.025)[1] + 1
c1
rho <- function(t){
nume <- (t/40)/(1 - (t/40))
deno <- ((25 - t)/40)/(1 - ((25-t)/40))
return(nume / deno)
}
rho(c1)
rho(c2)
c1
c2 <- dplyr::last(which(1 - sum_c >= 0.025)) + 1
# 1-sum_c[16] --> c = 17
c2
c2 <- dplyr::last(which(1 - sum_c >= 0.025)) + 1
# 1-sum_c[16] --> c = 17
c2
c1 <- which(sum_c > 0.025)[1]
c1
rho <- function(t){
nume <- (t/40)/(1 - (t/40))
deno <- ((25 - t)/40)/(1 - ((25-t)/40))
return(nume / deno)
}
rho(c1)
rho(c2)
Density <- function(x, theta){
normalizing_constant <- sum(1:24, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)})
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
Density(1, 0)
x = 1
theta = 0
normalizing_constant <- sum(1:24, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)})
normalizing_constant <- sum(sapply(1:24, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
Density <- function(x, theta){
normalizing_constant <- sum(sapply(1:24, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
Density(1, 0)
sum(sapply(1:18, function(t){Density(t, 0)}))
sum(sapply(1:17, function(t){Density(t, 0)}))
Density <- function(x){
theta <- log(((x/40)/(1 - (x/40)))/(((25-x)/40)/(1-(25-x)/40)))
normalizing_constant <- sum(sapply(1:24, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
sum(sapply(1:17, function(t){Density(t, 0)}))
sum(sapply(1:17, function(t){Density(t)}))
sapply(1:17, function(t){Density(t)})
x=c(1:17)
x
theta <- log(((x/40)/(1 - (x/40)))/(((25-x)/40)/(1-(25-x)/40)))
theta
sapply(1:17, function(t){Density(t, 0)})[c(8, 17)]
Density <- function(x, theta){
normalizing_constant <- sum(sapply(1:24, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
sapply(1:17, function(t){Density(t, 0)})[c(8, 17)]
sapply(1:17, function(t){Density(t, 0)})
sapply(1:17, function(t){Density(t, 0)})[8, 17]
sapply(1:17, function(t){Density(t, 0)})[8]
sapply(seq(-5, 5, 0.01), function(theta){sum(1:7, function(t){sapply(Density(t, theta))})})
sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(1:7, function(t){sapply(Density(t, theta))}))})
sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(1:7, function(t){Density(t, theta)}))})
Density <- function(x, theta){
normalizing_constant <- sum(sapply(1:24, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(1:7, function(t){Density(t, theta)}))})
sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7, function(t){Density(t, theta)}))})
7/40 * (1-7/40)
18/40 * (1-18/40)
(7/40 * (1-7/40)) / (18/40 * (1-18/40))
log(0.079, 0.797)
log(0.079)
log(0.797)
Density <- function(x, theta){
normalizing_constant <- sum(sapply(0:25, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
for(theta in seq(-5, 5, 0.01)){
sum(sapply(1:7, function(t){Density(t, theta)}))
}
sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7, function(t){Density(t, theta)}))})
number <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7, function(t){Density(t, theta)}))})
which(number < 0.025)[1]
seq(-5, 5, 0.01)[which(number < 0.025)]
seq(-5, 5, 0.01)[which(number < 0.025)][`]
seq(-5, 5, 0.01)[which(number < 0.025)][1]
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7, function(t){Density(t, theta)}))})
seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(6:25, function(t){Density(t, theta)}))})
seq(-5, 5, 0.01)[which(cdf2 > 0.025)][1]
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
theta2 <- seq(-5, 5, 0.01)[which(cdf2 > 0.025)][1]
theta2
log(theta1)
exp(theta1)
exp(theta2)
x <- 1005
y <- 1025
n <- 2030
Calcu_upper <- function(c){
pbinom(x, n, c) - 0.025
}
uniroot(Calcu_upper, c(0, 1))$root
Calcu_lower <- function(c){
pbinom(x, n, c, lower.tail = F) - 0.025
}
uniroot(Calcu_lower, c(0, 1))$root
x <- 1005
y <- 1025
n <- 2030
Calcu_upper <- function(c, t){
pbinom(t, n, c) - 0.025
}
uniroot(Calcu_upper, c(0, 1), t = x)$root
# for y:
uniroot(Calcu_upper, c(0, 1), t = y)$root
uniroot(Calcu_lower, c(0, 1), t = y)$root
Calcu_lower <- function(c, t){
pbinom(t, n, c, lower.tail = F) - 0.025
}
uniroot(Calcu_lower, c(0, 1), t = x)$root
# for y:
uniroot(Calcu_upper, c(0, 1), t = y)$root
uniroot(Calcu_lower, c(0, 1), t = y)$root
# for x:
uniroot(Calcu_upper, c(0, 1), t = x)$root
uniroot(Calcu_lower, c(0, 1), t = x)$root
# for y:
uniroot(Calcu_upper, c(0, 1), t = y)$root
uniroot(Calcu_lower, c(0, 1), t = y)$root
pbinom(5, 30, .5, lower.tail = F)
Density <- function(x, theta){
normalizing_constant <- sum(sapply(0:25, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(8:25,
function(t){Density(t, theta)}))})
theta2 <- seq(-5, 5, 0.01)[which(cdf2 <= 0.025)][1]
theta2
theta2 <- seq(-5, 5, 0.01)[which(cdf2 <= 0.025)]
theta2
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
theta2
exp(theta1)
exp(theta2)
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(7:25,
function(t){Density(t, theta)}))})
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
theta2
exp(theta1)
exp(theta2)
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
sum(sapply(0:8, function(t){Density(t, theta1)})
)
sum(sapply(0:8, function(t){Density(t, theta1)}))
sum(sapply(0:7, function(t){Density(t, theta1)}))
sum(sapply(7:25, function(t){Density(t, theta2)}))
sum(sapply(8:25, function(t){Density(t, theta2)}))
sum(sapply(6:25, function(t){Density(t, theta2)}))
Density <- function(x, theta){
normalizing_constant <- sum(sapply(0:25, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(7:25,
function(t){Density(t, theta)}))})
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
theta2
exp(theta1)
exp(theta2)
Density <- function(x, theta){
normalizing_constant <- sum(sapply(0:25, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(:25,
function(t){Density(t, theta)}))})
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
Density <- function(x, theta){
normalizing_constant <- sum(sapply(0:25, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(:25,
function(t){Density(t, theta)}))})
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(6:25,
function(t){Density(t, theta)}))})
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
theta2
exp(theta1)
exp(theta2)
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(8:25,
function(t){Density(t, theta)}))})
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
theta2
exp(theta1)
exp(theta2)
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(7:25,
function(t){Density(t, theta)}))})
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
theta2
exp(theta1)
exp(theta2)
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:6,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
exp(theta1)
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:8,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
exp(theta1)
Density <- function(x, theta){
normalizing_constant <- sum(sapply(0:40, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(7:25,
function(t){Density(t, theta)}))})
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
theta2
exp(theta1)
exp(theta2)
Density <- function(x, theta){
normalizing_constant <- sum(sapply(0:25, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
cdf1 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(0:7,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.01)[which(cdf1 <= 0.025)][1]
theta1
cdf2 <- sapply(seq(-5, 5, 0.01), function(theta){sum(sapply(7:25,
function(t){Density(t, theta)}))})
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
theta2
exp(theta1)
exp(theta2)
Density <- function(x, theta){
normalizing_constant <- sum(sapply(0:25, function(t){choose(40, t) *
choose(40, 25 - t) * exp(t * theta)}))
choose(40, x) * choose(40, 25 - x) * exp(x * theta) / normalizing_constant
}
cdf1 <- sapply(seq(-5, 5, 0.001), function(theta){sum(sapply(0:7,
function(t){Density(t, theta)}))})
theta1 <- seq(-5, 5, 0.001)[which(cdf1 <= 0.025)][1]
theta1
cdf2 <- sapply(seq(-5, 5, 0.001), function(theta){sum(sapply(7:25,
function(t){Density(t, theta)}))})
theta2 <- dplyr::last(seq(-5, 5, 0.01)[which(cdf2 <= 0.025)])
theta2
theta2 <- dplyr::last(seq(-5, 5, 0.001)[which(cdf2 <= 0.025)])
theta2
exp(theta1)
exp(theta2)
# install.packages('devtools')
devtools::install_github("idc9/r_jive")
library(ajive)
# sample a toy dataset with true joint rank of 1
blocks <- sample_toy_data(n=200, dx=100, dy=500)
data(SimData)
library(r.jive)
data(SimData)
data(BRCA_data)
data_blocks_heatmap(blocks, show_color_bar=FALSE)
initial_signal_ranks <- c(2, 3) # set by looking at scree plots
18.71/24.95
18.71 * 4
18.71 * 3
screeplot(blocks[[1]])
screeplot(blocks$`1`)
screeplot(blocks$1)
screeplot(blocks$`1`)
screeplot(blocks[1])
screeplot(blocks[[1]])
data <- blocks$`1`
screeplot(data)
screeplot(princomp(data))
screeplot(princomp(blocks$`1`))
screeplot(princomp(blocks$`2`))
screeplot(princomp(blocks$`2`))
screeplot(princomp(t(blocks$`2`)))
screeplot(princomp(t(blocks$`1`)))
screeplot(princomp(blocks$`1`))
data_blocks_heatmap(blocks, show_color_bar=FALSE)
initial_signal_ranks <- c(2, 3) # set by looking at scree plots
jive_results <- ajive(blocks, initial_signal_ranks,
n_wedin_samples = 100, n_rand_dir_samples = 100)
# estimated joint rank
jive_results$joint_rank
decomposition_heatmaps(blocks, jive_results)
# common normalized scores
dim(jive_results$joint_scores)
# Full matrix representation of the joint signal for the first block
dim(jive_results$block_decomps[[1]][['joint']][['full']])
# joint block specific scores for the first block
dim(jive_results$block_decomps[[1]][['joint']][['u']])
# joint block specific loadings for the first block
dim(jive_results$block_decomps[[1]][['joint']][['v']])
# individual block specific scores for the second block
dim(jive_results$block_decomps[[2]][['individual']][['u']])
library(r.jive)
data(BRCA_data)
data_blocks_heatmap(blocks, show_color_bar=FALSE)
View(blocks)
data_blocks_heatmap(Data, show_color_bar = FALSE)
data_blocks_heatmap(list(t(Data$Expression), t(Data$Methylation),
t(Data$miRNA)), show_color_bar = FALSE)
data_blocks_heatmap(list(t(Data$Expression), t(Data$Methylation), show_color_bar = FALSE)
data_blocks_heatmap(list(t(Data$Expression), t(Data$Methylation)), show_color_bar = FALSE)
data_blocks_heatmap(list(t(unname(Data$Expression)),
t(unname(Data$Methylation))), show_color_bar = FALSE)
n.genes <- 40000
n.samples <- 20
type <- rep(c('A', 'B'), each=10)
data <- matrix(rnorm(n.genes*n.samples), ncol=n.samples)
ranked.data <- apply(data, 1, rank)
head(data)
head(ranked.data)
ranked.data[1:10, 1:10]
dim(ranked.data)
dim(data)
wilstat <- apply(ranked.data[type=='A',], 2, sum)
summary(wilstat)
hist(wilstat, breaks=seq(54.5, 155.5, by = 1))
ranked.data <- apply(exprs(prostate), 1, rank)
x<- seq(0, 1, 0.00001)
y <- apply(x, function(x){x^3 * (1-x)^3})
y <- sapply(x, function(t){t^3 * (1-t)^3})
y
argmin(y)
min(y)
which(y == min(y))
which(y == min(y[2:10000]))
plot(x, y)
plot(x, y)
setwd("~/Documents/GitHub/longitudinal_violence_study/analysis")
library(tidyverse)
library(ltmle)
## Load data
load('../data/female_SCM_imputed.RData')
female_SCM <- female_SCM %>%
mutate(
victim1 = as.numeric(victim1),
victim2 = as.numeric(victim2),
victim3 = as.numeric(victim3),
victim4 = as.numeric(victim4),
C1 = BinaryToCensoring(is.censored = C1),
C2 = BinaryToCensoring(is.censored = C2),
C3 = BinaryToCensoring(is.censored = C3),
C4 = BinaryToCensoring(is.censored = C4)
)
Lnodes <- c(
'suicide2', 'relation2', 'religion2', 'psywell2',
'victfrnd2', 'drug2', 'alcohol2',
'suicide3', 'relation3', 'religion3', 'psywell3',
'victfrnd3', 'drug3', 'alcohol3',
'suicide4', 'relation4', 'religion4', 'psywell4',
'victfrnd4', 'drug4', 'alcohol4'
)
ltmle <- function(...) suppressMessages(ltmle::ltmle(...))
results_tmle <- ltmle(
data = female_SCM,
Anodes = c('victim1', 'victim2', 'victim3','victim4'),
Cnodes = c('C1', 'C2', 'C3', 'C4'),
Lnodes = Lnodes,
Ynodes = 'Y',
abar = list(
c(1, 1, 1, 1),
c(0, 0, 0, 0)
)
)
summary(results_tmle, 'tmle')
summary(results_tmle, 'iptw')
results_gcomp <- ltmle(
data = female_SCM,
Anodes = c('victim1', 'victim2', 'victim3','victim4'),
Cnodes = c('C1', 'C2', 'C3', 'C4'),
Lnodes = Lnodes,
Ynodes = 'Y',
abar = list(
c(1, 1, 1, 1),
c(0, 0, 0, 0)
),
gcomp = TRUE
)
summary(results_gcomp)
